jobs:
  build:
    docker:
      - image: python:3.6 # similar to "image" in GitLab
    steps:
      - checkout
      - run: | # similar to "script" in GitLab
          pip install -r requirements.txt
          python manage.py check

  test:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: |
          pip install -r requirements.txt
          python manage.py test taskManager

  sast:
    machine: true
    steps:
      - checkout

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json || true

      - store_artifacts:
          path: bandit-output.json
          destination: bandit-artifact

  secret_scanning:
    machine: true
    steps:
      - checkout

      - run:
          command: docker run --rm -v $(pwd):/src hysnsec/trufflehog filesystem /src --json > trufflehog-output.json || true

      - store_artifacts:
          path: trufflehog-output.json
          destination: trufflehog-artifact
          when: always

  oast-snyk:
    docker:
      - image: node:alpine3.10
    steps:
      - checkout

      - run:
          command: |
            wget -O snyk https://github.com/snyk/cli/releases/download/v1.1156.0/snyk-alpine
            chmod +x snyk
            mv snyk /usr/local/bin/
            npm install
            snyk auth $SNYK_TOKEN
            snyk test --json > snyk-results.json || true

      - store_artifacts:
          path: snyk-results.json
          destination: snyk-artifact

  oast-frontend:
    machine: true
    steps:
      - checkout

      - run:
          name: Install npm packages
          command: npm install

      - run:
          name: Run RetireJS
          command: |
            docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-output.json --severity high

      - store_artifacts:
          path: retirejs-output.json
          destination: retirejs-artifact

  oast:
    machine: true
    steps:
      - checkout

      - run: docker run -v $(pwd):/src --rm hysnsec/safety check -r /src/requirements.txt --json | tee oast-results.json

      - store_artifacts:
          path: oast-results.json
          destination: safety-artifact

  integration:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run:
          command: |
            echo "This is an integration step"
            exit 1
          when: on_fail # Even if the job fails, continue to the next jobs

  release:
    machine: true # What is this for?
    steps:
      - checkout
      - run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build -t $DOCKER_USERNAME/django.nv .   # Build the application into Docker image
          docker push $DOCKER_USERNAME/django.nv         # Push the image into registry
  prod:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: echo "This is a deploy step"

  artifact:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: echo "hello" > hello.txt
      - store_artifacts:
          path: hello.txt
          destination: artifact-file

workflows:
  version: 2
  django:
    jobs:
      - build:
          filters: # Run the job with a specific branch
            branches:
              only:
                - main
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - main

      - sast:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - oast:
          requires:
            - build
          filters:
            branches:
              only:
                - main

      - oast-frontend:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - oast-snyk:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - secret_scanning:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - integration:
          requires:
            - secret_scanning
          filters:
            branches:
              only:
                - main

      - release:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - prod:
          requires:
            - integration
          filters:
            branches:
              only:
                - main
      - artifact:
          requires:
            - prod
          filters:
            branches:
              only:
                - main
